version: '2.1'

networks:
  bridge:
    driver: bridge

services:

  users-service:
    container_name: users-service
    build:
      context: users-service
      # context: https://github.com/realpython/flask-microservices-users.git
    volumes:
      - ./users-service/app:/usr/src/app
    networks:
      - bridge
    ports:
      - '5001:5000'
    environment:
      # - APP_SETTINGS=project.config.TestingConfig
      - APP_SETTINGS=project.config.DevelopmentConfig
      - DATABASE_URL=postgres://postgres:postgres@users-db:5432/users_dev
      - DATABASE_TEST_URL=postgres://postgres:postgres@users-db:5432/users_test
      - SECRET_KEY=my_precious
    depends_on:
      users-db:
        condition: service_healthy
    links:
      - users-db
    # command: gunicorn -b 0.0.0.0:5000 manage:app

  users-client:
    container_name: users-client
    build:
      context: users-client
      # context: https://github.com/realpython/flask-microservices-client.git
      args:
        - NODE_ENV=development
        - REACT_APP_USERS_SERVICE_URL=http://users-service:5000/
    volumes:
      - ./users-client/app:/usr/src/app
    networks:
      - bridge
    ports:
      - '9000:9000' # expose ports - HOST:CONTAINER
    depends_on:
      users-service:
        condition: service_started
    links:
      - users-service

  users-swagger:
    container_name: users-swagger
    build:
      context: users-swagger
    ports:
      - '8080:8080' # expose ports - HOST:CONTAINER
    environment:
      - API_URL=/swagger.json
      # - API_URL=https://raw.githubusercontent.com/realpython/flask-microservices-swagger/master/swagger.json
    depends_on:
      users-service:
        condition: service_started

  users-db:
    container_name: users-db
    build:
      context: users-db
    # context: https://github.com/realpython/flask-microservices-users.git#master:project/db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - bridge
    ports:
        - '5435:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: exit 0

  users-nginx:
    container_name: users-nginx
    build:
      context: users-nginx
    # restart: always
    networks:
      - bridge
    ports:
      - '80:80'
    depends_on:
      users-service:
        condition: service_started
      users-client:
        condition: service_started
    links:
      - users-service
      - users-client

  # 数据库管理Web服务
  adminer:
    container_name: adminer
    image: adminer
    networks:
      - bridge
    ports:
        - '1080:8080'
    links:
        - users-db:postgres

volumes:
  postgres-data: {}

# 编译镜像
# $ docker-compose build
# 创建和运行容器组
# $ docker-compose up -d
# 创建数据库
# $ docker-compose exec users-service python manage.py recreate_db
# 创建测试数据
# $ docker-compose exec users-service python manage.py seed_db
# 测试
# $ docker-compose exec users-service python manage.py test
# 覆盖测试
# $ docker-compose exec users-service python manage.py cov
# 停止容器组
# $ docker-compose stop
# 终止容器组运行并删除容器
# $ docker-compose down
# 强制重新编译镜像
# $ docker-compose build --no-cache
# 使用psgl连接数据库进行测试
# $ docker exec -ti users-db psql -U postgres -W
#   \c users_dev
#   \dt
#   \q
