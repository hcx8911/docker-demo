version: '2.1'

services:

  users-service:
    container_name: users-service
    build: users-service
    # image: users-service
    volumes:
      - ./users-service/app:/usr/src/app
    ports:
      - '5000'
    environment:
      - APP_SETTINGS=project.config.DevelopmentConfig
      - DATABASE_URL=postgres://postgres:postgres@users-db:5432/users_dev
      - DATABASE_TEST_URL=postgres://postgres:postgres@users-db:5432/users_test
    depends_on:
      users-db:
        condition: service_healthy
    links:
      - users-db
    command: gunicorn -b 0.0.0.0:5000 manage:app

  users-db:
    container_name: users-db
    build: users-db
    # image: users-db
    ports:
        - '5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: exit 0

  users-nginx:
    container_name: users-nginx
    build: users-nginx
    # image: users-nginx
    restart: always
    ports:
      - '80:80'
    depends_on:
      users-service:
        condition: service_started
    links:
      - users-service

  # 数据库管理Web服务
  adminer:
    container_name: adminer
    image: adminer
    ports:
        - '8080:8080'
    links:
        - users-db:postgres

# 编译镜像
# $ docker-compose build
# 运行容器组
# $ docker-compose up -d
# 创建数据库
# $ docker-compose run users-service python manage.py recreate_db
# 创建测试数据
# $ docker-compose run users-service python manage.py seed_db
# 测试
# $ docker-compose run users-service python manage.py test
# 停止容器组
# $ docker-compose stop
# 终止容器组
# $ docker-compose down
# 强制重新编译镜像
# $ docker-compose build --no-cache
# 使用psgl连接数据库进行测试
# $ docker exec -ti users-db psql -U postgres -W
#   \c users_dev
#   \dt
#   \q
